LESSON 2 - Fundamentals

I. Hello, world!:
1. Thẻ <script>:
- Chương trình JS có thể được thêm vào gần nhất ở bất kỳ vị trí nào trong file HTM khi sử dụng thẻ <script>
VD:
<!DOCTYPE html>
<html>
    <body>
        <p>Before the script...</p>
        <script>
            alert("Hello, World!");
        </script>
    </body>
</html>

2. Modern markup:
- Thẻ <script> có 1 số các thuộc tính ít được sử dụng trong ngày nay nhưng vấn có thể được tìm thấy trong code cũ 
a. Thuộc tính type: <script type=...>
VD:
<script type="text/javascript">

b. Thuộc tính language:
- Chỉ định ngôn ngữ của bản thảo
- Không còn được sử dụng do JS là ngôn ngữ mặc định

* Comment trước và sau scripts:
- Trong 1 số cuốn sách ngày xưa, ta có thể nhìn thấy comment bên trong thẻ <script> như sau:
<script type="text/javascript"><!--
    ...
//--></script>

3. External scripts:
- Nếu ta có rất nhiều mã JS, ta có thể đẩy nó thành các file riêng biệt
- Các file scripts này được gắn vào HTML thông qua thuộc tính src 
- Cú pháp:
<script src="/path/to/script.js">

- Ta cũng có thể gắn 1 đường dẫn URL:
<script src="url_path">

- Để gắn nhiều file scripts cùng lúc, ta có thể sử dụng nhiều thẻ <script>

4. Chú ý:
Khi thuộc tính src được thiết lập, phần script bên trong thẻ đó sẽ không có tác dụng 
VD:
<script src="file.js">
  alert(1); // the content is ignored, because src is set
</script>

==> Khi này, để sử dụng cả 2, ta cần tách riêng 2 phần thành 2 thẻ <script> khác nhau:
<script src="file.js"></script>
<script>
  alert(1);
</script>

II. Code structure:
1. Statements - Câu lệnh:
- Nếu ta có nhiều câu lệnh, các câu lệnh có thể được phân tách bởi dấu chấm phẩy(semicolon)
VD:
alert('Hello');
alert('World');

2. Semicolon - Dấu chấm phẩy:
- Dấu chấm phẩy có thể được bỏ qua trong nhiều trường hợp khi ta ngắt dòng 
VD:
alert('Hello')
alert('World')
==> Trong gần như các trường hợp, ngắt dòng được ngụ ý là 1 dấu chấm phẩy
==> Tuy nhiên không phải trong tất cả các trường hợp:
VD:
alert(3 +
1
+ 2); // 6

* Có 1 số trường hợp mà JS "fails" trong việc thừa nhận 1 dấu chấm phẩy mà nó thực sự cần
VD:
alert("Hello");

[1, 2].forEach(alert);

- Trong trường hợp này, ta cần bỏ dấu chấm phẩy

3. Comments:
- Có 2 cách để comment:
+ //
+ /**/
Chú ý: Không nên sử dụng comments lồng nhau(nested)
VD:
/*
  /* nested comment ?!? */
*/
alert( 'World' );

III. Modern Mode - 'use strict'
- Từ khi ES5 ra đời, JS đã được bổ sung thêm 1 số chức năng và điều chỉnh 1 số chức năng đã có
- Do 1 số mã code sử dụng câu lệnh của các phiên bản trước nên có thể không hoạt động trơn tru như ban đầu
==> Để giúp mã cũ có thể hoạt động, tất cả các mọi thứ phải được đặt ở chế độ mặc định của nó
==> Ta cần kích hoạt điều đó bằng 1 câu lệnh đặc biệt: 'use strict' hoặc "use strict"

1. "use strict":
- Được đặt ở dòng đầu tiên của 1 file script hoặc đầu của 1 hàm
- Khi này, tất cả mã của script sẽ hoạt động theo hướng "modern" way
- Thông thường, ta đặt "use strict" ở đầu file để toàn bộ mã trong script hoạt động strict mode 
- Nếu ta không đặt "use strict" ở đầu file script thì đoạn mã từ sau phần "use strict" sẽ hoạt động theo strict mode
- Tác dụng:
  + Giúp dễ dàng viết mã JS an toàn
  + Biến đổi những mã được chấp chận trước đây thành lỗi
  + Trong JS thông thường, khi gõ nhầm tên biến sẽ tạo ra 1 biến toàn cục mới
  ==> Trong strict mode sẽ ném ra 1 lỗi 
  + Bất kỳ việc gán giá trị cho 1 biến hoặc thuộc tính không thể ghi(non-writable), hay thuộc tính chỉ đọc(getter only hoặc read-only getter), hay 
  thuộc tính không tồn tại, ... đều sẽ ném ra lỗi 

- Những trường hợp sau không được phép khi sử dụng "use strict":
(1) Sử dụng biến hay đối tượng mà chưa khai báo:
VD:
+ Biến:
"use strict"
x = 3.14; // Cause an error

+ Đối tượng:
"use strict"
x = {
  p1: 10,
  p2: 20
};  // Cause an error

(2) Xóa biến, đối tượng hoặc 1 hàm:
VD:
+ Biến:
"use strict";
let x = 3.14;
delete x; // Cause an error

+ Hàm:
"use strict";
function x(p1, p2){};
delete x; // Cause an error 

(3) Trùng tên tham số trong 1 hàm:
VD:
"use strict";
function x(p1, p1) {};  // Cause an error

(4) Hệ bát phân(Octal):
VD:
"use strict";
let x = 010;  // Cause an error

(5) Ký tự thoát hệ bát phân:
VD:
"use strict";
let x = "\010"; // Cause an error

(6) Gán giá trị cho thuộc tính chỉ đọc:
VD:
"use strict"
const obj = {};
Object.defineProperty(
  obj, 
  "x", 
  {
    value: 0,
    writable: false
  }
);

obj.x = 3.14; // Cause an error

(7) Các keyword không được sử dụng làm tên biến và gán giá trị:
VD: eval, arguments, public, ... 

* Chúng ta có nên sử dụng "use strict" không?
- Các phiên bản JS mới nhất hiện nay hỗ trợ lớp(classes) và modules là các cấu trúc ngôn ngữ nâng cao và 
đã được kích hoạt "use strict" 1 cách tự động
  ==> Ta không cần thêm "use strict"

