DESTRUCTURING:
- Destructuring là 1 cú pháp cho phép ta trích xuất các giá trị từ 1 mảng hoặc các thuộc tính từ đối tượng và gán chúng cho 1 biến 
==> Điều này giúp mã của bạn trở nên ngắn gọn và dễ đọc hơn

I. Destructuring với mảng:
VD:
let arr = ["John", "Smith"];
let [firstName, surName] = arr;
console.log(firstName); // John
console.log(surName); // Smith

- Ta cũng có thể sử dụng Destructuring với bất kỳ iterable nào như String hay Set
VD:
let [a, b, c] = "abc"; // ["a", "b", "c"]
let [one, two, three] = new Set([1, 2, 3]);

- Vòng lặp với Object.entries():
VD:
let user = {
    name: "John",
    age: 30
};

for(let [key, value] of Object.entries(user)){
    console.log(`${key}: ${value}`);
}

II. Phần còn lại ...:
- Thông thường, nếu như mảng dài hơn so với vế bên trái thì các phần tử còn lại sẽ bị bỏ qua 
VD:
let [name1, name2] = ["Julia", "Caesar", "Cypher"];
console.log(name1); // Julia
console.log(name2); // Caesar

==> Ta có thể sử dụng toán tử ... kèm thêm 1 tham số rest để gán phần còn lại của mảng cho 1 biến
VD:
let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];


Chú ý: Nếu như mảng ngắn hơn so với vế bên trái sẽ không xảy ra lỗi mà chỉ gán cho các biến còn lại giá trị undefined

III. Object Destructuring:
VD:
let options = {
    title: "Menu",
    width: 100,
    height: 200
};

let {title, width, height} = options;

- Phần rest:
VD:
let options = {
  title: "Menu",
  height: 200,
  width: 100
};

// title = property named title
// rest = object with the rest of properties
let {title, ...rest} = options;

// now title="Menu", rest={height: 200, width: 100}
alert(rest.height);  // 200
alert(rest.width);   // 100