I. Callback:
- Là 1 hàm được truyền vào 1 hàm khác như 1 tham số để được gọi lại khi 1 sự kiện cụ thể xảy ra 
- Thường được sử dụng trong bất đồng bộ khi 1 tác vụ có thể mất 1 khoảng thời gian để hoàn thành 
VD:
function getData(callback){
    console.log('Loading...');
    setTimeout(() => {
        const data = {
            name: 'John Doe',
            age: 30
        };
        callback(data);
    }, 2000);
}

function processData(data){
    console.log('Successful data: ', data);
}

getData(processData);

II. Promise:
- Promise là 1 đối tượng được sử dụng để xử lý các tác vụ bất đồng bộ
- Nó đại diện cho 1 giá trị có thể sẵn sàng trong tương lai, hoặc có thể không bao giờ sẵn sàng
- Promise gồm 3 trạng thái:
    + Pending: chưa hoàn thành hoặc thất bại
    + Fulfilled: hoàn thành thành công
    + Rejected: thất bại 
- Cú pháp:
let promise = new Promise(function(resolve, reject){
    
});
trong đó:
+ resolve(value): là 1 hàm được gọi khi tác vụ bất đồng bộ hoàn thành thành công (Fulfilled) và trả về value 
+ reject(error): là 1 hàm được gọi khi tác vụ bất đồng bộ thất bại (Rejected) và trả về error 

- Sử dụng promise:
promise.then(result => {
    // Fulfilled
})
.catch(error => {
    // Rejected
})
.finally(() => {

});

trong đó:
+ .then(result => {}): xử lý kết quả khi Promise được Fulfilled với result là giá trị trả về từ resolve(value)
+ .catch(error => {}): xử lý lỗi khi Promise được Rejected với error là giá trị trả về từ reject(error)
+ .finally(() => {}): thực hiện các công việc cuối cùng, không phụ thuộc vào kết quả Promise

III. Promises chaining - Chuỗi các Promise:
VD:
new Promise(function(resolve, reject) {

  setTimeout(() => resolve(1), 1000); // (*)

}).then(function(result) { // (**)

  alert(result); // 1
  return result * 2;

}).then(function(result) { // (***)

  alert(result); // 2
  return result * 2;

}).then(function(result) {

  alert(result); // 4
  return result * 2;

});

Chú ý:
let promise = new Promise(function(resolve, reject) {
  setTimeout(() => resolve(1), 1000);
});

promise.then(function(result) {
  alert(result); // 1
  return result * 2;
});

promise.then(function(result) {
  alert(result); // 1
  return result * 2;
});

promise.then(function(result) {
  alert(result); // 1
  return result * 2;
});

==> Đây không phải Promise chaining 

IV. Promise API:
- Có 6 phương thức static trong lớp Promise
(1) Promise.all():
- Cho phép thực thi và đợi nhiều Promise cùng 1 lúc
- Cú pháp:
Promise.all([
    promise1,
    promise2,
    promise3,
    ...
])
.then(result => {
    // Xử lý kết quả khi tất cả các Promise đều thành công 
})
.catch(error => {
    // Xử lý lỗi 
});

VD1:
Promise.all([
  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
]).then(console.log);

VD2:
let names = ['iliakan', 'remy', 'jeresig'];
let requests = names.map(fetch(`https://api.github.com/users/${name}`));

Promise.all(requests)
    .then(responses => {
        for(let response of responses){
            console.log(`${response.url}: ${response.status}`);
        }

        return responses;
    })
    .then(responses => Promise.all(responses.map(res => res.json())))
    .then(users => users.forEach(user => console.log(user.name)));

(2) Promise.allSettled():
- Cho phép thực thi nhiều Promise cùng 1 lúc và nhận được kết quả của tất cả các Promise, bất kể chúng thành công hay thất bại
- Cú pháp:
Promise.allSettled([
    promise1, 
    promise2, 
    promise3,
    ...
])
.then(results => {
    // Xử lý kết quả
})
.catch(error => {
    // Xử lý lỗi 
})

trong đó:
+ Khi tất cả các Promise trong mảng đều được giải quyết (resolved hoặc rejected), Promise.allSettled() sẽ trả về 1 mảng chứa các object mô tả kết quả của từng Promise, và được truyền vào then
+ Mỗi object trong mảng kết quả có 2 thuộc tính:
  . status: fulfilled hoặc rejected
  . value: giá trị được resolved nếu Promise thành công
    reason: giá trị được rejected nếu Promise thất bại 

VD:
function getData1(){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve({data: 'Data 1'});
    }, 2000);
  })
}

function getData2(){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      reject(new Error("Lỗi khi lấy dữ liệu 2"));
    }, 3000)
  });
}

function getData3(){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve({data: 'Data 3'});
    }, 1000);
  })
}

Promise.allSettled([
  getData1(),
  getData2(),
  getData3()
])
.then(results => {
  console.log('Results: ', results);
})
.catch(error => {
  console.error(error);
});

==> Output:
Kết quả: [
  { status: 'fulfilled', value: { data: 'Data 1' } },
  {
    status: 'rejected',
    reason: Error: Lỗi khi lấy dữ liệu 2
        at Timeout._onTimeout
        at listOnTimeout (node:internal/timers:573:17)
        at process.processTimers (node:internal/timers:514:7)
  },
  { status: 'fulfilled', value: { data: 'Data 3' } }
]

(3) Polyfill:
- Polyfill là phiên bản cũ của Promise.allSettled() khi các trình duyệt cũ không hỗ trợ tính năng allSettled()
- Cú pháp:
if(!Promise.allSettled){
  const rejectHandler = reason => ({ status: 'rejected', reason });
  const resolveHandler = value => ({ status: 'fulfilled', value });

  Promise.allSettled = function (promises) {
    const convertedPromises = promises.map(p => Promise.resolve(p).then(resolveHandler, rejectHandler));
    return Promise.all(convertedPromises);
  }
}

(4) Promise.race():
- Là 1 phương thức static của Promise cho phép chạy nhiều Promise cùng lúc và trả về Promise đầu tiên hoàn thành (thành công và thất bại)
- Cú pháp:
let promise = Promise.race(iterable);
VD:
const promise1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('Promise 1 resolved');
  }, 2000);
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('Promise 2 resolved');
  }, 1000);
});

const promise3 = new Promise((resolve, reject) => {
  setTimeout(() => {
    reject('Promise 3 rejected');
  }, 3000);
});

Promise.race([promise1, promise2, promise3])
  .then(result => {
    console.log(result); // Output: 'Promise 2 resolved'
  })
  .catch(error => {
    console.error(error);
  });

==> Output: Promise 2 resolved 
==> Vì Promise 2 chỉ tốn 1 giây để giải quyết

(5) Promise.any():
- Là phương thức giống với Promise.race(), tuy nhiên khác 1 chút đó là nó sẽ trả về Promise đầu tiên được hoàn thành (thành công)
- Nếu tất cả các Promise đều thất bại, thì Promise trả về sẽ bị rejected với 1 AggregateError chứa tất cả các lỗi 
- Cú pháp:
let promise = Promise.any(iterable);

VD:
Promise.any([
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Whoops!")), 1000)),
  new Promise((resolve, reject) => setTimeout(() => resolve(1), 2000)),
  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))
]).then(alert); // 1

Promise.any([
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Ouch!")), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Error!")), 2000))
]).catch(error => {
  console.log(error.constructor.name); // AggregateError
  console.log(error.errors[0]); // Error: Ouch!
  console.log(error.errors[1]); // Error: Error!
});

(6) resolve/reject:
