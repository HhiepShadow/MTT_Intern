CLASS INHERITANCE - KẾ THỪA
I. Từ khóa extends:
- Cú pháp:
class ChildClass extends ParentClass {

}

VD:
class Animal {
    constructor(name){
        this.speed = 0;
        this.name = name;
    }

    run(speed){
        this.speed = speed;
        console.log(`${this.name} runs with speed ${this.speed}`);
    }

    stop(){
        this.speed = 0;
        console.log(`${this.name} stands still`);
    }
}

class Rabbit extends Animal {
    hide(){
        console.log(`${this.name} hides`);
    }
}

let rabbit = new Rabbit("White Rabbit");
rabbit.run(5); // White Rabbit runs with speed 5
rabbit.hide(); // White Rabbit hides 

* Các cách sử dụng extends:
(1) Kế thừa lớp cha (lớp cơ sở - base class):
VD:
class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a sound.`);
  }
}

class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(`${this.name} barks.`);
  }
}

(2) Kế thừa lớp ẩn danh (anonymous class):
- Ta có thể tạo kế thừa 1 lớp ẩn danh từ 1 biến
VD:
const Animal = class {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a sound.`);
  }
};

class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(`${this.name} barks.`);
  }
}

(3) Kế thừa 1 hàm constructor:
VD:
function Animal(name) {
  this.name = name;
}

Animal.prototype.speak = function() {
  console.log(`${this.name} makes a sound.`);
};

class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(`${this.name} barks.`);
  }
}

==> Ta có thể kế thừa được 1 biểu thức hay hàm là do typeof class = function

II. Ghi đè 1 phương thức:
- Ta có thể ghi đè phương thức của lớp cơ sở trên lớp kế thừa để thay đổi logic của phương thức đó 
VD:
class Animal {
    stop() {
        ...
    }
}

class Rabbit extends Animal {
    stop() {
        ...
    }
}

==> Tuy nhiên, ta thường không muốn thay đổi hoàn toàn logic của phương thức cha, nhưng ta muốn xây dựng thêm hoặc mở rộng chức năng của phương thức cha 
==> Ta sẽ thực hiện 1 số logic trong phương thức cha nhưng vẫn gọi phương thức cha trước hoặc sau hoặc trong quá trình 
==> Sử dụng super:
+ super.method(...): gọi phương thức cha 
+ super(...): gọi hàm tạo của lớp cha 

Chú ý: Hàm arrow không hỗ trợ super 
VD:
class Rabbit extends Animal {
  stop() {
    setTimeout(() => super.stop(), 1000); // call parent stop after 1sec
  }
}
